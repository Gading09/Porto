{"ast":null,"code":"import createStore from 'unistore';\nimport { string } from 'prop-types';\nimport axios from 'axios';\nconst initialState = {\n  userNameInput: \"\",\n  userPasswordInput: \"\",\n  UserFullName: \"\",\n  userEmail: \"\",\n  userAddress: \"\",\n  userPhone: \"\",\n  token: \"\",\n  searchKeyword: \"\",\n  isiArticle: \"\",\n  judulArticle: \"\",\n  fotoUrlInput: \"\",\n  isLoading: false,\n  cekFotoStatus: false,\n  linkAudio: \"\",\n  fullName: \"\",\n  is_login: false,\n  textAudio: \"Indonesia\"\n};\nexport const store = createStore(initialState);\nexport const actions = store => ({\n  getSignIn: async state => {\n    console.log(\"username\", state.userNameInput);\n    console.log(\"password\", state.userPasswordInput);\n    const username = state.userNameInput;\n    const password = state.userPasswordInput;\n    const mydata = {\n      \"username\": username,\n      \"password\": password\n    };\n    const req = {\n      method: \"get\",\n      url: \"http://0.0.0.0:5000/login?username=\" + username + \"&password=\" + password\n    };\n    await axios(req).then(function (response) {\n      console.log(\"token === \", response.data.token);\n      console.log(\"login = \", store.is_login);\n      store.setState({\n        token: response.data.token,\n        is_login: true\n      });\n    }).catch(function (error) {\n      store.setState({\n        isLoading: false\n      }); // handle error\n\n      console.log(error);\n    });\n  },\n  postSignUp1: async state => {\n    const username = state.userNameInput;\n    const password = state.userPasswordInput;\n    const fullname = state.UserFullName;\n    const address = state.userAddress;\n    const email = state.userEmail;\n    const phone = state.userPhone;\n    const mydata = {\n      \"username\": username,\n      \"password\": password,\n      \"fullname\": fullname,\n      \"email\": email,\n      \"address\": address,\n      \"number_phone\": phone\n    };\n    const req = {\n      method: \"post\",\n      url: \"http://0.0.0.0:5000/user/registration\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      data: mydata\n    };\n    await axios(req).then(response => {\n      store.setState({\n        \"is_login\": true\n      }); //   return response\n    }).catch(error => {\n      console.log(mydata);\n      console.log(error);\n      return false;\n    });\n  },\n  postSignUp2: async state => {\n    console.warn(\"username\", state.userNameInput);\n    console.warn(\"password\", state.userPasswordInput);\n    console.warn(\"fullname\", state.UserFullName);\n    console.warn(\"address\", state.userAddress);\n    console.warn(\"email\", state.userEmail);\n    console.warn(\"phone\", state.userPhone);\n    const username = state.userNameInput;\n    const password = state.userPasswordInput;\n    const fullname = state.UserFullName;\n    const address = state.userAddress;\n    const email = state.userEmail;\n    const phone = state.userPhone;\n    const mydata = {\n      \"username\": username,\n      \"password\": password,\n      \"fullname\": fullname,\n      \"email\": email,\n      \"address\": address,\n      \"number_phone\": phone\n    };\n    const req = {\n      method: \"post\",\n      url: \"http://0.0.0.0:5000/agent/registration\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      data: mydata\n    };\n    await axios(req).then(response => {\n      store.setState({\n        \"is_login\": true\n      }); //   return response\n    }).catch(error => {\n      console.log(mydata);\n      console.log(error);\n      return false;\n    });\n  }\n});","map":{"version":3,"sources":["/home/alta10/fuk/github/fullstack4_hedy/Phase 2/Project Frontend/porto/src/store.js"],"names":["createStore","string","axios","initialState","userNameInput","userPasswordInput","UserFullName","userEmail","userAddress","userPhone","token","searchKeyword","isiArticle","judulArticle","fotoUrlInput","isLoading","cekFotoStatus","linkAudio","fullName","is_login","textAudio","store","actions","getSignIn","state","console","log","username","password","mydata","req","method","url","then","response","data","setState","catch","error","postSignUp1","fullname","address","email","phone","headers","postSignUp2","warn"],"mappings":"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","sourcesContent":["import createStore from 'unistore';\nimport { string } from 'prop-types';\nimport axios from 'axios';\n\nconst initialState = {\n    userNameInput:\"\",\n    userPasswordInput:\"\",\n    UserFullName:\"\",\n    userEmail:\"\",\n    userAddress:\"\",\n    userPhone:\"\",\n    token:\"\",\n    searchKeyword:\"\",\n    isiArticle:\"\",\n    judulArticle:\"\",\n    fotoUrlInput: \"\",\n    isLoading:false,\n    cekFotoStatus: false,\n    linkAudio: \"\",\n    fullName : \"\",\n    is_login: false,\n    textAudio: \"Indonesia\",\n   \n};\nexport const store = createStore(initialState)\n\nexport const actions = store => ({\n    getSignIn : async (state) => {\n        console.log(\"username\",state.userNameInput)\n        console.log(\"password\",state.userPasswordInput)\n        const username = state.userNameInput\n        const password = state.userPasswordInput\n        const mydata = {\n            \"username\": username,\n            \"password\": password\n        };\n        const req = {\n            method: \"get\",\n            url: \"http://0.0.0.0:5000/login?username=\"+username+\"&password=\"+password\n          };\n    \n          await axios(req)\n          .then(function(response){\n                console.log(\"token === \", response.data.token)\n                console.log(\"login = \", store.is_login)\n                store.setState({token : response.data.token, is_login:true})\n            })\n            .catch(function(error){\n                store.setState({isLoading: false})\n                // handle error\n                console.log(error)\n            })\n    },\n\n    postSignUp1 : async (state) => {\n        const username = state.userNameInput\n        const password = state.userPasswordInput\n        const fullname = state.UserFullName\n        const address = state.userAddress\n        const email = state.userEmail\n        const phone = state.userPhone\n        const mydata = {\n            \"username\": username,\n            \"password\": password,\n            \"fullname\": fullname,\n            \"email\": email,\n            \"address\": address,\n            \"number_phone\": phone\n        };\n  \n        const req = {\n          method: \"post\",\n          url: \"http://0.0.0.0:5000/user/registration\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          data: mydata\n        };\n  \n        await axios(req)\n            .then(response => {\n                  store.setState({\n                      \"is_login\": true\n                  });\n              //   return response\n            })\n            .catch(error => {\n                console.log(mydata)\n                console.log(error)\n                return false\n        })\n    },\n    postSignUp2 : async (state) => {\n        console.warn(\"username\",state.userNameInput)\n        console.warn(\"password\",state.userPasswordInput)\n        console.warn(\"fullname\",state.UserFullName)\n        console.warn(\"address\",state.userAddress)\n        console.warn(\"email\",state.userEmail)\n        console.warn(\"phone\",state.userPhone)\n        const username = state.userNameInput\n        const password = state.userPasswordInput\n        const fullname = state.UserFullName\n        const address = state.userAddress\n        const email = state.userEmail\n        const phone = state.userPhone\n        const mydata = {\n            \"username\": username,\n            \"password\": password,\n            \"fullname\": fullname,\n            \"email\": email,\n            \"address\": address,\n            \"number_phone\": phone\n        };\n  \n        const req = {\n          method: \"post\",\n          url: \"http://0.0.0.0:5000/agent/registration\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          data: mydata\n        };\n  \n        await axios(req)\n            .then(response => {\n                  store.setState({\n                      \"is_login\": true\n                  });\n              //   return response\n            })\n            .catch(error => {\n                console.log(mydata)\n                console.log(error)\n                return false\n        })\n    }\n})\n"]},"metadata":{},"sourceType":"module"}